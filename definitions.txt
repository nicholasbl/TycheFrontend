// Methods
fn get_scenarios() -> scenario_list

fn run_scenario( scenario_state ) -> run_result

fn optimize_scenario( scenario_opt ) -> opt_result


// Definitions
scenario_list : [ scenario ]

scenario : {
    name : string
    description : string
    image : url
    id : uuid
    category_defs : [ category ]
    metric_defs : [ metric ]
}

category : {
    name : string
    description : string
    starting_investment : int
    max_investment : int
    id : uuid
}

metric : {
    name : string
    description : string
    starting_opt : int
    opt_slider_min : int
    opt_slider_max : int
    id : uuid
}


// simulation inputs ===========================================================

scenario_state : {
    scenario_id: uuid
    category_states: state_dict
}

state_dict : {
    uuid: int,
    ...
}

// simulation outputs ==========================================================

run_result : {
    scenario_id : uuid,

    category_states: state_dict

    cells: cell_dict
}

cell_dict : {
    cat_uuid : { metric_uuid : cell, ... }
    ...
}

cell : [ float, ... ]

// optimization inputs =========================================================

scenario_opt : {
    scenario_id: uuid
    portfolio : int
    optim_sense : string
    metric_target: metric_uuid
    metric_states: [ metric_opt ]
    category_states: [ category_opt ]
}

metric_opt : {
    metric_id: metric_uuid
    value: int
    bound_type: string
}

category_opt : {
    category_id : category_uuid
    value: int
}

// optimization outputs ========================================================

opt_result : {
    scenario_id: uuid

    opt_metric_id: metric_uuid
    optim_sense  : string

    metric_limits : { metric_uuid : met_limit }
    category_limits : { category_uuid : cat_limit }
}

met_limit : {
    sense : string
    limit : float
    value : float
}

cat_limit : {
    limit : int // from optimizer, limit this category
    value : int // investment value
}
